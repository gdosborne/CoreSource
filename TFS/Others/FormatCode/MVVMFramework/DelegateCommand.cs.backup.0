// ***********************************************************************
// Assembly         : MVVMFramework
// Author           : Greg Osborne
// Created          : 04-28-2015
//
// Last Modified By : Greg Osborne
// Last Modified On : 04-28-2015
// ***********************************************************************
// <copyright file="DelegateCommand.cs" company="Statistics & Controls, Inc.">
//     Copyright ©  2015
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;
using System.Windows.Input;

namespace MVVMFramework
{
	/// <summary>
	/// Class DelegateCommand.
	/// </summary>
	public class DelegateCommand : ICommand
	{
		private readonly Predicate<object> _CanExecute;
		private readonly Action<object> _Execute;
		/// <summary>
		/// Occurs when changes occur that affect whether or not the command should execute.
		/// </summary>
		public event EventHandler CanExecuteChanged;
		/// <summary>
		/// Initializes a new instance of the <see cref="DelegateCommand"/> class.
		/// </summary>
		/// <param name="execute">The execute.</param>
		public DelegateCommand(Action<object> execute)
			: this(execute, null)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="DelegateCommand"/> class.
		/// </summary>
		/// <param name="execute">The execute.</param>
		/// <param name="canExecute">The can execute.</param>
		public DelegateCommand(Action<object> execute, Predicate<object> canExecute)
		{
			_Execute = execute;
			_CanExecute = canExecute;
		}

		/// <summary>
		/// Raises the can execute changed.
		/// </summary>
		public void RaiseCanExecuteChanged()
		{
			if (CanExecuteChanged != null)
				CanExecuteChanged(this, EventArgs.Empty);
		}

		/// <summary>
		/// Defines the method that determines whether the command can execute in its current state.
		/// </summary>
		/// <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
		/// <returns>true if this command can be executed; otherwise, false.</returns>
		public bool CanExecute(object parameter)
		{
			if (_CanExecute == null)
				return true;
			return _CanExecute(parameter);
		}

		/// <summary>
		/// Defines the method to be called when the command is invoked.
		/// </summary>
		/// <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
		public void Execute(object parameter)
		{
			_Execute(parameter);
		}
	}
}
